name: CI-CD

on:
  pull_request:
    branches: [main]
    types: [labeled]
    
jobs:
  test:
    if: |
      !github.event.pull_request.merged &&
      contains(github.event.pull_request.labels.*.name, 'in-preview') &&
      github.event.pull_request.user.login != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Cache Cypress binary
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            cypress-${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install

      - name: Run tests and validate code coverage
        run: pnpm run test:coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      # Cache the build output
      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: .next
          key: ${{ runner.os }}-build-${{ github.sha }}

  create-docker-image:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Restore cached build artifacts
      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: .next
          key: ${{ runner.os }}-build-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.IMAGE_NAME }}:${{ github.event.pull_request.head.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-preview:
    needs: create-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy preview version
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            cd ./krustberry.xyz
            export PREVIEW_IMAGE=${{ github.event.pull_request.head.sha }}
            docker compose -p latest up traefik -d --no-recreate
            docker compose -p ${{ github.event.pull_request.head.sha }} up preview -d

  send-notifications:
    needs: deploy-preview
    runs-on: ubuntu-latest
    steps:
      - name: Send a Slack notification for production approval
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ vars.SLACK_APPROVAL_CHANNEL_ID }}
            text: "New release request"
            blocks:
              - type: "header"
                text:
                  type: "plain_text"
                  text: "New release request"
              - type: "divider"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*UID:*\n${{ github.event.pull_request.head.sha }}"
                  - type: "mrkdwn"
                    text: "*Created at:*\n${{ github.event.pull_request.created_at }}"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Created by:*\n<${{ github.event.pull_request.user.html_url }}|@${{ github.event.pull_request.user.login }}>"
                  - type: "mrkdwn"
                    text: "*Assigned to:*\n<${{ github.event.pull_request.assignee.html_url }}|@${{ github.event.pull_request.assignee.login }}>"
              - type: "divider"
              - type: "rich_text"
                elements:
                  - type: "rich_text_quote"
                    elements:
                      - type: "text"
                        text: "Please notice it might take a moment to complete the action. Message will be updated once the action is done."
              - type: "actions"
                elements:
                  - type: "button"
                    text:
                      type: "plain_text"
                      text: "Approve"
                    action_id: "approve_production_deploy"
                    value: "${{ github.event.pull_request.head.sha }}/${{ github.event.pull_request.number }}"
                    style: "primary"
                    confirm:
                      title:
                        type: "plain_text"
                        text: "Are you sure?"
                      text:
                        type: "plain_text"
                        text: Releasing this version to production is permanent and cannot be undone unless manually reverted.
                      confirm:
                        type: "plain_text"
                        text: "Release"
                      deny:
                        type: "plain_text"
                        text: "Close"
                  - type: "button"
                    text:
                      type: "plain_text"
                      text: "Reject"
                    action_id: "reject_production_deploy"
                    value: "${{ github.event.pull_request.head.sha }}/${{ github.event.pull_request.number }}"
                    style: "danger"
                    confirm:
                      title:
                        type: "plain_text"
                        text: "Are you sure?"
                      text:
                        type: "plain_text"
                        text: By rejecting this release, the preview version will be deleted, and the PR will be unlabeled as “in-preview.”
                      style: "danger"
                      confirm:
                        type: "plain_text"
                        text: "Reject"
                      deny:
                        type: "plain_text"
                        text: "Close"

      - name: Post a comment with the preview link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "✅ Preview version has been deployed: [${{ github.event.pull_request.head.sha }}.krustberry.xyz](https://${{ github.event.pull_request.head.sha }}.krustberry.xyz)"
            })
